{"version":3,"sources":["webpack:///./src/externals/ammo.ts","webpack:///./src/scenes/physicsWithAmmo.ts"],"names":["ammoModule","ammoReadyPromise","Promise","resolve","then","res","preTasks","createScene","engine","canvas","scene","enablePhysics","camera","Math","PI","setTarget","Zero","attachControl","intensity","sphere","CreateSphere","diameter","segments","physicsImpostor","SphereImpostor","mass","restitution","position","y","ground","CreateGround","width","height","BoxImpostor"],"mappings":"oGAEWA,E,0FACEC,EAAmB,IAAIC,SAAQ,SAACC,IACzC,IAAI,GAAOC,MAAK,SAACC,GACbL,EAAaK,EACbF,EAAQE,S,60CCUhB,wBACI,KAAAC,SAAW,CAACL,GAEZ,KAAAM,YAAc,SAAOC,EAAgBC,GAAyB,qC,uCA0C1D,OAxCMC,EAAQ,IAAI,IAAMF,IAElBG,cAAc,KAAM,IAAI,KAAa,EAAMX,KAG3CY,EAAS,IAAI,IAAgB,kBAAmB,EAAGC,KAAKC,GAAK,EAAG,GAAI,IAAI,IAAQ,EAAG,EAAG,GAAIJ,IAGzFK,UAAU,IAAQC,QAGzBJ,EAAOK,cAAcR,GAAQ,GAGf,IAAI,IAAiB,QAAS,IAAI,IAAQ,EAAG,EAAG,GAAIC,GAG5DQ,UAAY,IAGZC,EAAS,IAAcC,aACzB,SACA,CAAEC,SAAU,EAAGC,SAAU,IACzBZ,IAGGa,gBAAkB,IAAI,IAAgBJ,EAAQ,IAAgBK,eAAgB,CAAEC,KAAM,EAAGC,YAAa,IAAMhB,GAGnHS,EAAOQ,SAASC,EAAI,GAGdC,EAAS,IAAcC,aACzB,SACA,CAAEC,MAAO,EAAGC,OAAQ,GACpBtB,IAGGa,gBAAkB,IAAI,IAAgBM,EAAQ,IAAgBI,YAAa,CAAER,KAAM,EAAGC,YAAa,KAEnG,CAAP,EAAOhB,WAIA,cAAI","file":"js/9.babylonBundle.js","sourcesContent":["import * as Ammo from \"ammo.js\";\n\nexport let ammoModule: any;\nexport const ammoReadyPromise = new Promise((resolve) => {\n    new Ammo().then((res: unknown) => {\n        ammoModule = res;\n        resolve(res);\n    });\n});\n","import { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\nimport { SphereBuilder } from \"@babylonjs/core/Meshes/Builders/sphereBuilder\";\nimport { GroundBuilder } from \"@babylonjs/core/Meshes/Builders/groundBuilder\";\nimport { AmmoJSPlugin } from \"@babylonjs/core/Physics/Plugins/ammoJSPlugin\";\nimport \"@babylonjs/core/Physics/physicsEngineComponent\";\n\n// If you don't need the standard material you will still need to import it since the scene requires it.\nimport \"@babylonjs/core/Materials/standardMaterial\";\nimport { PhysicsImpostor } from \"@babylonjs/core/Physics/physicsImpostor\";\nimport { ammoModule, ammoReadyPromise } from \"../externals/ammo\";\nimport { CreateSceneClass } from \"../createScene\";\n\nclass PhysicsSceneWithAmmo implements CreateSceneClass {\n    preTasks = [ammoReadyPromise];\n\n    createScene = async (engine: Engine, canvas: HTMLCanvasElement): Promise<Scene> => {\n        // This creates a basic Babylon Scene object (non-mesh)\n        const scene = new Scene(engine);\n    \n        scene.enablePhysics(null, new AmmoJSPlugin(true, ammoModule));\n    \n        // This creates and positions a free camera (non-mesh)\n        const camera = new ArcRotateCamera(\"my first camera\", 0, Math.PI / 3, 10, new Vector3(0, 0, 0), scene);\n    \n        // This targets the camera to scene origin\n        camera.setTarget(Vector3.Zero());\n    \n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, true);\n    \n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n    \n        // Default intensity is 1. Let's dim the light a small amount\n        light.intensity = 0.7;\n    \n        // Our built-in 'sphere' shape.\n        const sphere = SphereBuilder.CreateSphere(\n            \"sphere\",\n            { diameter: 2, segments: 32 },\n            scene\n        );\n    \n        sphere.physicsImpostor = new PhysicsImpostor(sphere, PhysicsImpostor.SphereImpostor, { mass: 2, restitution: 0.8}, scene);\n    \n        // Move the sphere upward 1/2 its height\n        sphere.position.y = 5;\n    \n        // Our built-in 'ground' shape.\n        const ground = GroundBuilder.CreateGround(\n            \"ground\",\n            { width: 6, height: 6 },\n            scene\n        );\n        \n        ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.6});\n    \n        return scene;\n    };\n}\n\nexport default new PhysicsSceneWithAmmo();\n"],"sourceRoot":""}