{"version":3,"sources":["webpack:///./src/scenes/defaultWithTexture.ts"],"names":["createScene","engine","canvas","scene","camera","Math","PI","setTarget","Zero","attachControl","intensity","CreateSphere","diameter","segments","position","y","CreateAsync","then","xrHelper","console","log","state","sessionManager","initializeSessionAsync","err","DefaultSceneWithTexture"],"mappings":"0hDAgBA,wBAEI,KAAAA,YAAc,SACVC,EACAC,GAAyB,qC,mCAsEzB,OAnEMC,EAAQ,IAAI,IAAMF,IAGlBG,EAAS,IAAI,IACf,kBACA,EACAC,KAAKC,GAAK,EACV,GACA,IAAI,IAAQ,EAAG,EAAG,GAClBH,IAIGI,UAAU,IAAQC,QAGzBJ,EAAOK,cAAcP,GAAQ,GAGf,IAAI,IAAiB,QAAS,IAAI,IAAQ,EAAG,EAAG,GAAIC,GAG5DO,UAAY,GAGH,IAAcC,aACzB,SACA,CAAEC,SAAU,EAAGC,SAAU,IACzBV,GAIGW,SAASC,EAAI,EAoBpB,IAAsBC,YAAYb,GAAOc,MAAK,SAACC,GAC3CC,QAAQC,IAAI,WAAYF,GAGxBC,QAAQC,IAAI,YAAYF,EAASG,OACjCH,EAASI,eAAeC,uBAAuB,mBAMhD,SAACC,GACAL,QAAQC,IAAI,oBAAqBI,MAG9B,CAAP,EAAOrB,WAIA,cAAIsB","file":"js/7.babylonBundle.js","sourcesContent":["import { ArcRotateCamera } from '@babylonjs/core/Cameras/arcRotateCamera';\nimport { Engine } from '@babylonjs/core/Engines/engine';\nimport { HemisphericLight } from '@babylonjs/core/Lights/hemisphericLight';\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial';\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture';\nimport { Vector3 } from '@babylonjs/core/Maths/math.vector';\nimport { GroundBuilder } from '@babylonjs/core/Meshes/Builders/groundBuilder';\nimport { SphereBuilder } from '@babylonjs/core/Meshes/Builders/sphereBuilder';\nimport { Scene } from '@babylonjs/core/scene';\nimport { WebXRExperienceHelper } from '@babylonjs/core/XR/webXRExperienceHelper';\n\nimport grassTextureUrl from '../../assets/grass.jpg';\nimport { CreateSceneClass } from '../createScene';\n\n// If you don't need the standard material you will still need to import it since the scene requires it.\n// import \"@babylonjs/core/Materials/standardMaterial\";\nexport class DefaultSceneWithTexture implements CreateSceneClass {\n\n    createScene = async (\n        engine: Engine,\n        canvas: HTMLCanvasElement\n    ): Promise<Scene> => {\n        // This creates a basic Babylon Scene object (non-mesh)\n        const scene = new Scene(engine);\n\n        // This creates and positions a free camera (non-mesh)\n        const camera = new ArcRotateCamera(\n            \"my first camera\",\n            0,\n            Math.PI / 3,\n            10,\n            new Vector3(0, 0, 0),\n            scene\n        );\n\n        // This targets the camera to scene origin\n        camera.setTarget(Vector3.Zero());\n\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, true);\n\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n\n        // Default intensity is 1. Let's dim the light a small amount\n        light.intensity = 0.7;\n\n        // Our built-in 'sphere' shape.\n        const sphere = SphereBuilder.CreateSphere(\n            \"sphere\",\n            { diameter: 2, segments: 32 },\n            scene\n        );\n\n        // Move the sphere upward 1/2 its height\n        sphere.position.y = 1;\n\n        // Our built-in 'ground' shape.\n        // const ground = GroundBuilder.CreateGround(\n        //     \"ground\",\n        //     { width: 6, height: 6 },\n        //     scene\n        // );\n\n        // Load a texture to be used as the ground material\n        // const groundMaterial = new StandardMaterial(\"ground material\", scene);\n        // groundMaterial.diffuseTexture = new Texture(grassTextureUrl, scene);\n\n        // ground.material = groundMaterial;\n\n        // XR Related\n        // const xrHelper = await WebXRExperienceHelper.CreateAsync(scene);\n        // const xr = navigator.xr;\n        // const mode = await navigator.xr.isSessionSupported(\"immersive-ar\") ? \"ar\" : \"vr\";\n        \n        WebXRExperienceHelper.CreateAsync(scene).then((xrHelper: WebXRExperienceHelper) => {\n            console.log(\"success \", xrHelper);\n            // const mode =  xrHelper.sessionManager.isSessionSupportedAsync('immersive-ar');\n            // console.log(\"Mode is \", mode);\n            console.log(\"State is \",xrHelper.state);\n            xrHelper.sessionManager.initializeSessionAsync(\"immersive-ar\");\n            //   enterXRAsync({\n            //     uiOptions: {\n            //         sessionMode: \"immersive-ar\"\n            //     }\n            // })\n        }, (err)=> {\n            console.log(\"failed with err: \", err);\n        });\n\n        return scene;\n    };\n}\n\nexport default new DefaultSceneWithTexture();"],"sourceRoot":""}